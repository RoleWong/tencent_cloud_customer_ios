//
//  OTAggregator.h
//  OpenTelemetry
//
//  Created by ravendeng on 2021/11/10.
//  Copyright Â© 2021 Tencent. All rights reserved.
//

#import <Foundation/Foundation.h>
#import "OTAggregatorProtocol.h"

@class OTMetricDataPoint;

NS_ASSUME_NONNULL_BEGIN

/// Aggregator helps aggregating measurements created by instruments
@interface OTAggregator : NSObject <OTAggregatorProtocol>

/// name of the aggregator, usually named after it's instrument, configurable by metic views
@property (nonatomic, copy) NSString *name;

/// description of the aggregator, usually it's the instrument' s description, configurable by metic views
@property (nonatomic, copy) NSString *descriptionInfo;

/// unit of the aggregator, usually it's the instrument' s unit, configurable by metic views
@property (nonatomic, copy) NSString *unit;

/// start time records when the aggregation begin
@property (nonatomic, assign) NSTimeInterval startTime;

/// type of the aggregation
@property (nonatomic, assign) OTAggregatorType type;

/// See define in OTAggregatorProtocol.h
@property (nonatomic, assign) OTAggregatorTemporality temporality;

/// See define in OTAggregatorProtocol.h
@property (nonatomic, assign) OTAggregatorMonotonic monotonic;

///  a callback which will called when metric reader needs to create an new data point
@property (nonatomic, copy) OTObservableMeasurementBlock onMetricReaderRead;

/// value type of the aggregator, see value type above
@property (nonatomic, assign) OTNumericValueType valueType;

/// clock instance for aggregator in getting the proper time stamp.
@property (nonatomic, strong) id<OTClockProtocol> clock;

/// Keys that help aggregator to collect attributes only that is needed by user
@property (nonatomic, strong) OTSafeArray<NSString *> *attributeKyes;

/// reservoir responsible for getting trace context from tracing module
@property (nonatomic, strong) id<OTExemplarReservoirProtocol> reservoir;

/// an array of data points wich already collected by the aggregator
@property (nonatomic, strong) OTSafeArray<OTMetricDataPoint *> *chartedDataPoints;

/// thread safe lock
@property (nonatomic, strong) NSRecursiveLock *lock;

/// Must be implemented by subclasses, to handle aggregation via measurement
/// @param measurement the measurement generated by instrument, and it's attributes was filtered by the aggregator
- (OTMetricDataPoint *_Nullable)aggregateMeasurement:(OTMeasurement *)measurement;

/// Must be implemented by subclasses, initialize a data point for aggregation
- (void)dataPointInitialize:(OTMetricDataPoint *)dataPoint;

/// make safe copy of current data points as an array
/// @param aggregatingDataPoints aggregatingDataPoints
- (OTSafeArray *)copyAggregatingDataPoints:(OTSafeDictionary<NSString *, OTMetricDataPoint *> *)aggregatingDataPoints;

/// make safe copy of charted points as an array
/// @param chartedDataPoints chartedDataPoints
- (OTSafeArray *)copyChartedDataPoints:(OTSafeArray<OTMetricDataPoint *> *)chartedDataPoints;

/// to decide wether the aggregator can handle this measurement
/// @param measurement measurement
- (BOOL)canProcessMeasurement:(OTMeasurement *)measurement;

/// to decide wether the datapoint is worth reporting in order to safe network costs
/// @param dataPoint datapoint
- (BOOL)needReportWithDataPoint:(OTMetricDataPoint *)dataPoint;

@end

NS_ASSUME_NONNULL_END
